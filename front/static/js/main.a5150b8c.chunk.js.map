{"version":3,"sources":["MonitorTable.js","MonitorGauge.js","MonitorPie.js","App.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","key","render","cates","map","cate","color","name","MonitorTable","networkData","data","item","index","push","src_ip","src_port","dst_ip","dst_port","timestamp","class_field","dataSource","MonitorGauge","type","value","reduce","a","v","length","text","config","width","height","min","max","range","statistic","visible","MonitorPie","datas","count","arr","i","forceFit","radius","padding","angleField","colorField","Header","Layout","Content","Footer","Title","Typography","Text","App","props","getNetworkData","Axios","get","then","res","setState","catch","console","log","start","stop","onChange","state","checked","this","interval","setInterval","clearInterval","className","style","position","zIndex","marginTop","span","minHeight","marginRight","marginBottom","defaultChecked","textAlign","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a5150b8c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport { Table, Tag, Space } from 'antd';\n\n\nconst columns = [\n  {\n    title: '源IP地址',\n    dataIndex: 'src_ip',\n    key: 'src_ip',\n  },\n  {\n    title: '源端口号',\n    dataIndex: 'src_port',\n    key: 'src_port',\n  },\n  {\n    title: '目的IP地址',\n    dataIndex: 'dst_ip',\n    key: 'dst_ip',\n  },\n  {\n    title: '目的端口号',\n    dataIndex: 'dst_port',\n    key: 'dst_port',\n  },\n  {\n    title: '时间戳',\n    dataIndex: 'timestamp',\n    key: 'timestamp',\n  },\n  {\n    title: '类别',\n    key: 'cates',\n    dataIndex: 'cates',\n    render: cates => (\n      <>\n        {cates.map(cate => {\n          return (\n            <Tag color={cate.color} key={cate.name}>\n              {cate.name}\n            </Tag>\n          );\n        })}\n      </>\n    ),\n  },\n];\n\n\nexport const MonitorTable = ({networkData}) => {\n\n    let data = []\n    networkData && networkData.map((item,index) => {\n        data.push({\n            key: index,\n            src_ip: item.src_ip,\n            src_port: item.src_port,\n            dst_ip: item.dst_ip,\n            dst_port: item.dst_port,\n            timestamp: item.timestamp,\n            cates: [\n                {\n                    name:item.class_field === 'Benign'?'正常':item.class_field,\n                    color:'geekblue'\n                }\n            ],\n        })\n    })\n    return(\n        <Table columns={columns} dataSource={data} />\n    )\n        \n}\n","import React from 'react';\nimport { Gauge } from '@ant-design/charts';\nexport const MonitorGauge = ({networkData}) => {\n    let data = []\n    networkData && networkData.map((item, index) => {\n        data.push(item.class_field)\n    })\n\n    const count = (arr, type) => arr.reduce((a, v) => v === type ? a + 1 : a + 0, 0);\n\n    let benigns = count(data, 'Benign')\n\n    let value = benigns*100 / data.length\n\n    let text = '优'\n    if(value>75 && value<=100){\n        text = '优'\n    }else if(value>50 && value<=75){\n        text = '良'\n    }else if(value>25 && value<=50){\n        text = '中'\n    }else if(value>0 && value<=25){\n        text = '差'\n    }\n\n    const config = {\n        width: 350,\n        height: 350,\n        value: value,\n        min: 0,\n        max: 100,\n        range: [0, 25, 50, 75, 100],\n        color: ['#39B8FF', '#52619B', '#43E089', '#C0EDF3'],\n        statistic: {\n        visible: true,\n        text: text,\n        color: '#30bf78',\n        },\n    };\n    return <Gauge {...config} />;\n};\n","import React from 'react';\nimport { Donut } from '@ant-design/charts';\nexport const MonitorPie = ({networkData}) => {\n    let datas = []\n\n    let data = [\n        {\n            type: 'Benign',\n            value: 0,\n        },\n        {\n            type: 'DoS',\n            value: 0,\n        },\n        {\n            type: 'DDos',\n            value: 0,\n        },\n        {\n            type: 'Bot',\n            value: 0,\n        },\n        {\n            type: 'BruteForce',\n            value: 0,\n        },\n        {\n            type: 'Infiltration',\n            value: 0,\n        }\n\n    ]\n    \n    networkData && networkData.map((item, index) => {\n        datas.push(item.class_field)\n    })\n\n    const count = (arr, type) => arr.reduce((a, v) => v === type ? a + 1 : a + 0, 0);\n\n    if(networkData.length>0){\n        for(let i=0;i<data.length;i++){\n            data[i].value = count(datas, data[i].type)\n        }\n    }\n    \n    const config = {\n        forceFit: true,\n        radius: 0.8,\n        padding: 'auto',\n        data,\n        angleField: 'value',\n        colorField: 'type',\n\n    };\n    return <Donut {...config} />;\n};","import React from 'react';\nimport Axios from 'axios';\nimport 'antd/dist/antd.css';\nimport { MonitorTable } from './MonitorTable';\nimport { MonitorGauge } from './MonitorGauge';\nimport { MonitorPie } from './MonitorPie'\n\nimport { Layout, Typography, Card, Switch, Row, Col } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\nconst { Title, Text } = Typography; \nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data:[],\n      checked:false\n    }\n  }\n\n  getNetworkData = () => {\n    Axios.get('http://192.168.195.144:20205/panel/get_network_data/')\n    .then((res) => {\n      this.setState({\n        data:res.data.data\n      })\n    }).catch(() => {\n      console.log(\"error\")\n    })\n  }\n\n  start = () => {\n    Axios.get('http://192.168.195.144:20205/network/start/')\n  }\n\n  stop = () => {\n    Axios.get('http://192.168.195.144:20205/network/stop/')\n  }\n\n  onChange = () => {\n    if(this.state.checked===false){\n      this.start()\n    }else{\n      this.stop()\n    }\n    this.setState({\n      checked:!this.state.checked\n    })\n    \n  }\n\n  componentDidMount(){\n    this.getNetworkData();\n    this.interval = setInterval(() => this.getNetworkData(), 5000)\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.interval)\n  }\n\n  render(){\n      return (\n      <div className=\"App\">\n        <Layout>\n          <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n            <Title style={{color:'white', padding:5,}}>实时网络入侵检测系统</Title>\n          </Header>\n          <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n            <div className=\"site-layout-background\" style={{ padding: 24}}>\n              <Row>\n                  <Col span={18}>\n                    <Card title=\"实时入侵检测\" style={{minHeight:500, marginRight: 12}}>  \n                        <Switch style={{marginBottom:20, marginRight:10}}\n                        defaultChecked={false}\n                          onChange={this.onChange}\n                        />\n                        <Text>开始入侵检测</Text>\n                      <MonitorTable networkData={this.state.data}/>\n                    </Card>\n                  </Col>\n                  <Col span={6}>\n                      <Card title=\"网络健康程度\">\n                        <MonitorGauge networkData={this.state.data}/>\n                      </Card>\n                      <Card title=\"流量类别占比\">\n                        <MonitorPie networkData={this.state.data} />\n                      </Card>\n                  </Col>\n                  \n                \n              </Row>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Real Time Intrusion Detection System ©2020 Created by Cheng</Footer>\n        </Layout>\n        \n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}